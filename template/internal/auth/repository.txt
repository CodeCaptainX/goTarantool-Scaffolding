package auth

import (
	custom_log "{{PROJECT_NAME}}/pkg/logs"
	"{{PROJECT_NAME}}/pkg/responses"
	tarantool_utls "{{PROJECT_NAME}}/pkg/tarantool"
	"{{PROJECT_NAME}}/pkg/utls"
	"fmt"
	"log"
	"os"
	"time"

	"github.com/golang-jwt/jwt"
	"github.com/google/uuid"
	"github.com/joho/godotenv"

	"github.com/tarantool/go-tarantool/v2"
	"github.com/tarantool/go-tarantool/v2/pool"
	_ "github.com/tarantool/go-tarantool/v2/uuid"
)

type AuthRepo interface {
	LogIn(userName string, lastName string) (*AuthLoginResponse, *responses.ErrorResponse)
	CheckSession(login_session string) (bool, *responses.ErrorResponse)
	MiniLogin(mini_login_req MiniLoginRequest) (*MiniLoginResponse, *responses.ErrorResponse)
}

type AuthRepoImpl struct {
	dbPool *pool.ConnectionPool
}

func NewAuthRepoImpl(db *pool.ConnectionPool) *AuthRepoImpl {
	return &AuthRepoImpl{
		dbPool: db,
	}
}

func (a *AuthRepoImpl) LogIn(userName string, password string) (*AuthLoginResponse, *responses.ErrorResponse) {
	req := tarantool.NewExecuteRequest(
		`SELECT 
			id,
			user_uuid, 
			user_name, role_id, login_session,
			commission, created_at 
		FROM users_space WHERE status_id = 1 AND user_name=? AND password=? `).Args([]interface{}{userName, password})
	var users []User
	// Send the request and get the response
	resp, err := a.dbPool.Do(req, pool.ANY).GetResponse()
	if err != nil {
		custom_log.NewCustomLog("login_failed", err.Error(), "error")
		err_msg := &responses.ErrorResponse{}
		return nil, err_msg.NewErrorResponse("login_failed", fmt.Errorf("can not sign database error"))
	}

	rows, err := tarantool_utls.CountRow(resp)
	if err != nil || rows == 0 || resp == nil {
		if err == nil {
			err = fmt.Errorf("wrong user or password or your account has been suspended")
		}
		fmt.Println("zero result or nil response:", rows)
		custom_log.NewCustomLog("login_failed", err.Error(), "warn")
		err_msg := &responses.ErrorResponse{}
		return nil, err_msg.NewErrorResponse("login_failed", err)
	}

	// Decode the response data into the appropriate type
	err = resp.DecodeTyped(&users)
	if err != nil {
		custom_log.NewCustomLog("login_failed", err.Error())
		err_resp := &responses.ErrorResponse{}
		return nil, err_resp.NewErrorResponse("login_failed", fmt.Errorf("can not sign Decode error"))
	}

	if len(users) == 0 {
		custom_log.NewCustomLog("login_failed", "LogIn(): user not found of username:"+userName+" password:*****")
		err_resp := &responses.ErrorResponse{}
		return nil, err_resp.NewErrorResponse("login_failed", err)
	}
	user := users[0]

	var r AuthLoginResponse

	hours := utls.GetenvInt("JWT_EXP_HOUR", 7)
	expirationTime := time.Now().Add(time.Duration(hours) * time.Hour)

	// Create the JWT claims
	login_session, _ := uuid.NewV7()
	claims := jwt.MapClaims{
		// "id":            user.Id,
		"user_uuid":     user.UserUuid.String(),
		"username":      user.UserName,
		"role_id":       user.RoleId,
		"login_session": login_session.String(),
		"exp":           expirationTime.Unix(),
	}

	errs := godotenv.Load()
	if errs != nil {
		log.Fatalf("Error loading .env file")
	}
	secret_key := os.Getenv("JWT_SECRET_KEY")

	//Update Session
	update := tarantool.NewExecuteRequest(
		`UPDATE  users_space SET login_session=? WHERE id=?`).Args([]interface{}{login_session.String(), user.Id})
	// Send the request and get the response
	resp_u, err := a.dbPool.Do(update, pool.ANY).GetResponse()
	if err != nil {
		custom_log.NewCustomLog("login_failed", err.Error(), "error")
		err_msg := &responses.ErrorResponse{}
		return nil, err_msg.NewErrorResponse("login_failed", err)
	}
	_, err = resp_u.Decode()
	if err != nil {
		custom_log.NewCustomLog("login_failed", err.Error(), "error")
		err_msg := &responses.ErrorResponse{}
		return nil, err_msg.NewErrorResponse("login_failed", err)
	}

	// Create the token
	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)
	tokenString, err := token.SignedString([]byte(secret_key))
	if err != nil {
		err_resp := &responses.ErrorResponse{}
		return nil, err_resp.NewErrorResponse("login_failed", err)
	}

	r.Auth.Token = tokenString
	r.Auth.TokenType = "jwt"

	return &r, nil
}

func (a *AuthRepoImpl) CheckSession(login_session string) (bool, *responses.ErrorResponse) {
	req := tarantool.NewExecuteRequest(
		`SELECT 
			1 AS is_valid
		FROM users_space WHERE login_session=? `).Args([]interface{}{login_session})
	var check []Valid
	// Send the request and get the response
	resp, err := a.dbPool.Do(req, pool.ANY).GetResponse()
	if err != nil {
		custom_log.NewCustomLog("login_failed", err.Error(), "error")
		err_msg := &responses.ErrorResponse{}
		return false, err_msg.NewErrorResponse("login_failed", fmt.Errorf("can not sign database error"))
	}

	rows, err := tarantool_utls.CountRow(resp)
	if err != nil || rows == 0 || resp == nil {
		if err == nil {
			err = fmt.Errorf("invalid login session")
		}
		custom_log.NewCustomLog("login_failed", err.Error(), "warn")
		err_msg := &responses.ErrorResponse{}
		return false, err_msg.NewErrorResponse("login_failed", err)
	}

	// Decode the response data into the appropriate type
	err = resp.DecodeTyped(&check)
	if err != nil {
		custom_log.NewCustomLog("login_failed", err.Error())
		err_resp := &responses.ErrorResponse{}
		return false, err_resp.NewErrorResponse("login_failed", fmt.Errorf("can not check login session Decode error"))
	}

	if len(check) == 0 {
		custom_log.NewCustomLog("login_failed", "CheckSession(): not found of login_session:"+login_session)
		err_resp := &responses.ErrorResponse{}
		return false, err_resp.NewErrorResponse("login_failed", err)
	}
	return true, nil
}

func (a *AuthRepoImpl) MiniLogin(mini_login_req MiniLoginRequest) (*MiniLoginResponse, *responses.ErrorResponse) {
	// prepare sql
	var sql = tarantool.NewExecuteRequest(`
		SELECT
			id,
			user_uuid, 
			user_name, role_id, login_session,
			commission, created_at ,user_alias
		FROM users_space
		WHERE user_name = $1 AND password = $2 
		AND role_id = 1 AND deleted_at IS NULL
	`).Args([]interface{}{mini_login_req.Username, mini_login_req.Password})

	//execute request
	var users []UserForMini
	resp, err := a.dbPool.Do(sql, pool.ANY).GetResponse()
	if err != nil {
		custom_log.NewCustomLog("login_failed", err.Error())
		err_resp := &responses.ErrorResponse{}
		return nil, err_resp.NewErrorResponse("login_failed", fmt.Errorf("can not login database error"))
	}

	if err = resp.DecodeTyped(&users); err != nil {
		custom_log.NewCustomLog("login_failed", err.Error())
		err_resp := &responses.ErrorResponse{}
		return nil, err_resp.NewErrorResponse("login_failed", fmt.Errorf("can not decode select user"))
	}

	if len(users) == 0 {
		custom_log.NewCustomLog("login_failed", "wrong username or password")
		err_resp := &responses.ErrorResponse{}
		return nil, err_resp.NewErrorResponse("login_failed", fmt.Errorf("wrong user or password or your account has been suspended"))
	}

	user := users[0]
	login_session, _ := uuid.NewV7()
	expirationTime := time.Now().Add(10 * 24 * time.Hour)
	claims := jwt.MapClaims{
		"user_uuid":     user.UserUuid.String(),
		"username":      user.UserName,
		"role_id":       user.RoleId,
		"login_session": login_session.String(),
		"exp":           expirationTime.Unix(),
	}
	errs := godotenv.Load()
	if errs != nil {
		log.Fatalf("Error loading .env file")
	}
	secret_key := os.Getenv("JWT_SECRET_KEY")
	//Update Session
	update := tarantool.NewExecuteRequest(
		`UPDATE  users_space SET login_session=? WHERE id=?`).Args([]interface{}{login_session.String(), user.Id})
	// Send the request and get the response
	resp_u, err := a.dbPool.Do(update, pool.ANY).GetResponse()
	if err != nil {
		custom_log.NewCustomLog("login_failed", err.Error(), "error")
		err_msg := &responses.ErrorResponse{}
		return nil, err_msg.NewErrorResponse("login_failed", err)
	}
	_, err = resp_u.Decode()
	if err != nil {
		custom_log.NewCustomLog("login_failed", err.Error(), "error")
		err_msg := &responses.ErrorResponse{}
		return nil, err_msg.NewErrorResponse("login_failed", err)
	}

	// Create the token
	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)
	tokenString, err := token.SignedString([]byte(secret_key))
	if err != nil {
		err_resp := &responses.ErrorResponse{}
		return nil, err_resp.NewErrorResponse("login_failed", err)
	}

	return &MiniLoginResponse{
		NickName:   user.UserAlias,
		UserName:   user.UserName,
		CurrencyID: 1,
		Token:      tokenString,
	}, nil
}
